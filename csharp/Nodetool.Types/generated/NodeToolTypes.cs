//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NodeTool SDK Type Generator.
//     Runtime Version: Python
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using MessagePack;
using System.Collections.Generic;

namespace Nodetool.Types;

/// <summary>
/// Provides centralized access to all NodeTool types and nodes.
/// This class configures MessagePack serialization and provides references to type collections.
/// 
/// Types are organized into separate namespaces:
/// - Core types: Nodetool.Types.Core.CoreTypes
/// - Nodetool_huggingface types: Nodetool.Types.Nodetool_huggingface.Nodetool_huggingfaceTypes
/// - Nodetool_fal types: Nodetool.Types.Nodetool_fal.Nodetool_falTypes
/// - Nodetool_lib_audio types: Nodetool.Types.Nodetool_lib_audio.Nodetool_lib_audioTypes
/// - Nodetool_chroma types: Nodetool.Types.Nodetool_chroma.Nodetool_chromaTypes
/// - Nodetool_base types: Nodetool.Types.Nodetool_base.Nodetool_baseTypes
/// 
/// Nodes are organized into separate namespaces:
/// - Nodetool_huggingface nodes: Nodetool.Types.Nodes.Nodetool_huggingface.Nodetool_huggingfaceNodes
/// - Nodetool_fal nodes: Nodetool.Types.Nodes.Nodetool_fal.Nodetool_falNodes
/// - Nodetool_lib_audio nodes: Nodetool.Types.Nodes.Nodetool_lib_audio.Nodetool_lib_audioNodes
/// - Nodetool_chroma nodes: Nodetool.Types.Nodes.Nodetool_chroma.Nodetool_chromaNodes
/// - Nodetool_base nodes: Nodetool.Types.Nodes.Nodetool_base.Nodetool_baseNodes
/// 
/// Usage:
/// var coreType = Nodetool.Types.Core.CoreTypes.Types.AudioRef;  // Access core type
/// var packageType = Nodetool.Types.Huggingface.HuggingfaceTypes.Types.AudioClassifier;  // Access package type
/// var node = Nodetool.Types.Nodes.Huggingface.HuggingfaceNodes.Nodes.AudioClassifier;  // Access node type
/// var data = MessagePackSerializer.Serialize(obj);  // Serialize any NodeTool type
/// var obj = MessagePackSerializer.Deserialize<T>(data);  // Deserialize any NodeTool type
/// </summary>
public static class NodeToolTypes
{
    /// <summary>
    /// Static constructor that configures MessagePack serialization for all NodeTool types.
    /// This ensures proper serialization/deserialization of all types in the system.
    /// </summary>
    static NodeToolTypes()
    {
        var resolver = MessagePack.Resolvers.CompositeResolver.Create(
            // Add standard resolvers
            MessagePack.Resolvers.StandardResolver.Instance,
            
            // Add generated types
            MessagePack.Resolvers.DynamicObjectResolver.Instance
        );

        var options = MessagePackSerializerOptions.Standard.WithResolver(resolver);
        MessagePackSerializer.DefaultOptions = options;
    }
}
