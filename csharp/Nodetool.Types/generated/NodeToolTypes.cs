//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the NodeTool SDK Type Generator.
// </auto-generated>
//------------------------------------------------------------------------------

using MessagePack;
using System;
using System.Collections.Generic;

namespace Nodetool;

/// <summary>
/// Configures MessagePack serialization for all NodeTool types.
/// 
/// Usage:
/// 1. Initialize MessagePack:
///    NodeToolTypes.Initialize();
///    
/// 2. Use types directly:
///    using Nodetool.Types;
///    using Nodetool.Nodes;
///    
    var audio = new Core.AudioRef();
    var classifier = new Huggingface.AudioClassifier();
///    
/// 3. MessagePack Serialization:
///    var data = MessagePackSerializer.Serialize(obj);
///    var obj = MessagePackSerializer.Deserialize<T>(data);
/// </summary>
public static class NodeToolTypes
{
    private static bool isInitialized = false;
    private static readonly object initLock = new object();
    internal static readonly List<Type> KnownTypes = new();

    public static void Initialize()
    {
        if (isInitialized) return;

        lock (initLock)
        {
            if (isInitialized) return;

            // Register types from all packages
            Nodes.Base.RegisterTypes();
            Types.Core.RegisterTypes();
            Nodes.Huggingface.RegisterTypes();

            // Configure MessagePack
            var resolver = MessagePack.Resolvers.CompositeResolver.Create(
                MessagePack.Resolvers.StandardResolver.Instance,
                MessagePack.Resolvers.DynamicObjectResolver.Instance
            );

            var options = MessagePackSerializerOptions.Standard.WithResolver(resolver);
            MessagePackSerializer.DefaultOptions = options;

            // Register all types with MessagePack
            foreach (var type in KnownTypes)
            {
                MessagePackSerializer.SerializerCache.Get(type, options);
            }

            isInitialized = true;
        }
    }
}
