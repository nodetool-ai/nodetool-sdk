// <auto-generated>
// This file was generated automatically from NodeTool Python asset types.
// Generation time: 2025-07-19 19:16:09 UTC
// Do not edit manually - changes will be overwritten.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace Nodetool.SDK.Generated.Assets;

/// <summary>
/// Base class for all asset references in NodeTool WebSocket messages
/// Based on WebSocket message format: type, uri, asset_id, data
/// </summary>
[JsonDerivedType(typeof(ImageRef), "image")]
[JsonDerivedType(typeof(AudioRef), "audio")]
[JsonDerivedType(typeof(VideoRef), "video")]
[JsonDerivedType(typeof(TextRef), "text")]
[JsonDerivedType(typeof(DocumentRef), "document")]
public abstract class NodeToolDataObject
{
    /// <summary>Asset type (image, audio, video, etc.)</summary>
    [JsonPropertyName("type")]
    public abstract string Type { get; }

    /// <summary>URI for accessing the asset</summary>
    [JsonPropertyName("uri")]
    public string Uri { get; set; } = "";

    /// <summary>Asset ID for storage reference</summary>
    [JsonPropertyName("asset_id")]
    public string? AssetId { get; set; }

    /// <summary>Embedded data (base64 or other format)</summary>
    [JsonPropertyName("data")]
    public Dictionary<string, object>? Data { get; set; }

    /// <summary>Check if asset has embedded data</summary>
    public bool HasEmbeddedData => Data != null && Data.Count > 0;

    /// <summary>Check if asset has reference (URI or AssetId)</summary>
    public bool HasAssetReference => !string.IsNullOrEmpty(Uri) || !string.IsNullOrEmpty(AssetId);

    /// <summary>Get embedded data as specific type</summary>
    public T? GetEmbeddedData<T>() where T : class
    {
        if (Data == null) return null;
        // Simple implementation - could be enhanced with JSON deserialization
        return Data.Values.OfType<T>().FirstOrDefault();
    }
}

